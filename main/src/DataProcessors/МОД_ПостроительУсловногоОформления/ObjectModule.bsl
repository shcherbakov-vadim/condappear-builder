///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, Щербаков Вадим, chtcherbakov.vadim@gmail.com
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
// Ссылка на репозиторий:
// https://github.com/shcherbakov-vadim/condappear-builder.git

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Переменные

Перем Результат, ТекущийРезультат, СтекЭлементов, СтекУсловий;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Инициализация построителя
// 
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - Условное оформление
// 
// Возвращаемое значение:
//  ОбработкаОбъект.МОД_ПостроительУсловногоОформления - Объект построителя
//  
Функция Инициализация(УсловноеОформление) Экспорт
	Результат = УсловноеОформление;
	СтекЭлементов = Новый Массив;
	СтекУсловий = Новый Массив;
	
	Возврат ЭтотОбъект;
КонецФункции

// Добавление элемента условного оформления
// 
// Возвращаемое значение:
//  ОбработкаОбъект.МОД_ПостроительУсловногоОформления - Объект построителя
Функция Добавить() Экспорт
	Если ВыполнятьДействие() Тогда
		Если ЗначениеЗаполнено(СтекЭлементов) Тогда
			Если СтекЭлементов.Количество() <> 1 Тогда
				ВызватьИсключение "Неверный вызов";
			КонецЕсли;
			
			СтекЭлементов.Удалить(0);
		КонецЕсли;
		
		СтекЭлементов.Вставить(0, Результат.Элементы.Добавить());
		ТекущийРезультат = СтекЭлементов[0];
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

// Установка параметра оформления
// 
// Параметры:
//  ИмяПараметра - Строка - Имя поля
//  Значение - Произвольный - Значение
// 
// Возвращаемое значение:
//  ОбработкаОбъект.МОД_ПостроительУсловногоОформления - Объект построителя
Функция Оформление(ИмяПараметра, Значение) Экспорт
	Если СтекЭлементов.Количество() <> 1 Тогда
		ВызватьИсключение "Неверный вызов";
	КонецЕсли;

	Если ВыполнятьДействие() Тогда
		ТекущийРезультат = ИмяПараметра;
		СтекЭлементов[0].Оформление.УстановитьЗначениеПараметра(ИмяПараметра, Значение);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

// Добавление отбора по значению
// 
// Параметры:
//  ПолеПуть - Строка - ПолеПуть
//  Значение - Произвольный - Значение
// 
// Возвращаемое значение:
//  ОбработкаОбъект.МОД_ПостроительУсловногоОформления - Объект построителя
Функция ОтборЗначение(ПолеПуть, Значение) Экспорт
	Если ВыполнятьДействие() Тогда
		ТекущийРезультат = ЭлементыОтбора().Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ПолеПуть) = Тип("ПолеКомпоновкиДанных") Тогда
			ТекущийРезультат.ЛевоеЗначение = ПолеПуть
		Иначе
			ТекущийРезультат.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеПуть);
		КонецЕсли;
		ТекущийРезультат.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

// Добавление произвольного отбора
// 
// Параметры:
//  ПолеПуть - ПолеКомпоновкиДанных
//  		 - Строка - путь к полю
//  ВидСравнения - ВидСравненияКомпоновкиДанных - Вид сравнения
//  ПравоеЗначение - Произвольный - Правое значение
// 
// Возвращаемое значение:
//  ОбработкаОбъект.МОД_ПостроительУсловногоОформления - Объект построителя
Функция Отбор(ПолеПуть, ВидСравнения, ПравоеЗначение = Неопределено) Экспорт
	Если ВыполнятьДействие() Тогда
		ТекущийРезультат = ЭлементыОтбора().Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ПолеПуть) = Тип("ПолеКомпоновкиДанных") Тогда
			ТекущийРезультат.ЛевоеЗначение = ПолеПуть
		Иначе
			ТекущийРезультат.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеПуть);
		КонецЕсли;
		ТекущийРезультат.ВидСравнения = ВидСравнения;
		
		Если ЗначениеЗаполнено(ПравоеЗначение) Тогда
			ТекущийРезультат.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

// Добавление группы элементов отбора
// 
// Параметры:
//  ТипГруппы - Строка - Тип группы
// 
// Возвращаемое значение:
//  ОбработкаОбъект.МОД_ПостроительУсловногоОформления - Объект построителя
Функция ГруппаОтборов(ТипГруппы) Экспорт
	Если ВыполнятьДействие() Тогда
		ТекущийРезультат = ЭлементыОтбора().Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ТекущийРезультат.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных["Группа" + ТипГруппы];
		СтекЭлементов.Вставить(0, ТекущийРезультат);
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

// Конец группы.
// 
// Возвращаемое значение:
//  ОбработкаОбъект.МОД_ПостроительУсловногоОформления - Объект построителя
Функция КонецГруппы() Экспорт
	СтекЭлементов.Удалить(0);
	
	Возврат ЭтотОбъект;
КонецФункции

// Добавление оформляемых полей
// 
// Параметры:
//  ИменаПоля - Строка - имена элементов через запятую
//  		  - ПолеФормы, ГруппаФормы, ТаблицаФормы, ДекорацияФормы - элемент
//  		  - ПолеКомпоновкиДанных - поле элемента
//  	  	  - Массив из Строка,ПолеФормы, ГруппаФормы, ТаблицаФормы, ДекорацияФормы,ПолеКомпоновкиДанных -
//  ПрефиксИмениРодитель - Строка - Префикс для имени элемента
//  					 - ГруппаФормы, ТаблицаФормы - Родитель для получения подчиненных элементов
// 
// Возвращаемое значение:
//  ОбработкаОбъект.МОД_ПостроительУсловногоОформления - Объект построителя
Функция Поля(ИменаПоля, ПрефиксИмениРодитель = "") Экспорт
	Если СтекЭлементов.Количество() <> 1 Тогда
		ВызватьИсключение "Неверный вызов";
	КонецЕсли;
		
	Если ВыполнятьДействие() Тогда
		ПрефиксИмени = ПрефиксИмениРодитель;
		Если ТипЗнч(ПрефиксИмениРодитель) = Тип("ГруппаФормы")
			ИЛИ ТипЗнч(ПрефиксИмениРодитель) = Тип("ТаблицаФормы") Тогда
			
			МассивИменаПоля = ПолучитьПодчиненныеПоля(ПрефиксИмениРодитель, ИменаПоля);
			ПрефиксИмени = "";
		
		ИначеЕсли ТипЗнч(ИменаПоля) = Тип("Строка") Тогда
			МассивИменаПоля = СтрРазделить(ИменаПоля, ",");
		ИначеЕсли ТипЗнч(ИменаПоля) = Тип("Массив") Тогда
			МассивИменаПоля = ИменаПоля;
		ИначеЕсли ТипЗнч(ИменаПоля) = Тип("ПолеКомпоновкиДанных") Тогда
			МассивИменаПоля = Новый Массив;
			МассивИменаПоля.Добавить(ИменаПоля);
		Иначе
			МассивИменаПоля = Новый Массив;
			МассивИменаПоля.Добавить(Новый ПолеКомпоновкиДанных(ИменаПоля.Имя));
		КонецЕсли;
		
		Для Каждого ИмяПоле Из МассивИменаПоля Цикл
			ТекущийРезультат = СтекЭлементов[0].Поля.Элементы.Добавить();
			Если ТипЗнч(ИмяПоле) = Тип("ПолеКомпоновкиДанных") Тогда
				ТекущийРезультат.Поле = ИмяПоле;
			ИначеЕсли ТипЗнч(ИмяПоле) = Тип("Строка") Тогда
				ТекущийРезультат.Поле = Новый ПолеКомпоновкиДанных(ПрефиксИмени + ИмяПоле);
			Иначе
				ТекущийРезультат.Поле = Новый ПолеКомпоновкиДанных(ИмяПоле.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЭтотОбъект;
КонецФункции

// Начало условного выполнения
// 
// Параметры:
//  ЗначениеУсловия - Булево - Значение условия
// 
// Возвращаемое значение:
//  ОбработкаОбъект.МОД_ПостроительУсловногоОформления - Объект построителя
Функция Условие(ЗначениеУсловия) Экспорт
	СтекУсловий.Вставить(0, ЗначениеУсловия);
	
	Возврат ЭтотОбъект;
КонецФункции

// Конец условного выполнения
// 
// Возвращаемое значение:
//  ОбработкаОбъект.МОД_ПостроительУсловногоОформления - Объект построителя
Функция КонецУсловия() Экспорт
	СтекУсловий.Удалить(0);

	Возврат ЭтотОбъект;
КонецФункции

// Установка значения свойства последнего результата
// 
// Параметры:
//  Имя - Строка - Имя
//  Значение - Произвольный - Значение
// Возвращаемое значение:
//  ОбработкаОбъект.МОД_ПостроительУсловногоОформления - Объект построителя
Функция УстановитьСвойство(Имя, Значение) Экспорт
	ТекущийРезультат()[Имя] = Значение;
	
	Возврат ЭтотОбъект;
КонецФункции

// Результат последнего действия условного оформления
// 
// Возвращаемое значение:
//  ЭлементУсловногоОформленияКомпоновкиДанных -
//	ГруппаЭлементовОтбораКомпоновкиДанных -
//	ЭлементОтбораКомпоновкиДанных -
Функция ТекущийРезультат() Экспорт
	Если ТипЗнч(ТекущийРезультат) = Тип("Строка") Тогда
		Возврат СтекЭлементов[0].Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ТекущийРезультат));
	Иначе
		Возврат ТекущийРезультат;
	КонецЕсли;
КонецФункции

// Последний добавленный элемент условного оформления
// 
// Возвращаемое значение:
//  ЭлементУсловногоОформленияКомпоновкиДанных - 
Функция ТекущийЭлемент() Экспорт
	Возврат СтекЭлементов[СтекЭлементов.ВГраница()];
КонецФункции
	
#КонецОбласти

#Область Объект

Функция ЭлементыОтбора()
	Если ТипЗнч(СтекЭлементов[0]) = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
		Возврат СтекЭлементов[0].Отбор.Элементы;
	Иначе
		Возврат СтекЭлементов[0].Элементы;
	КонецЕсли;
КонецФункции

Функция ВыполнятьДействие()
	Для Каждого Значение Из СтекУсловий Цикл
		Если НЕ Значение Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область Служебные

Функция ПолучитьПодчиненныеПоля(НачальныйЭлемент, ИменаПолей, МассивРезультат = Неопределено)
	Если МассивРезультат = Неопределено Тогда
		МассивРезультат = Новый Массив;
	КонецЕсли;
	
	Для Каждого Элемент Из НачальныйЭлемент.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьПодчиненныеПоля(Элемент, ИменаПолей, МассивРезультат);
		ИначеЕсли ИменаПолей = "*" Тогда
			МассивРезультат.Добавить(Элемент.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивРезультат;
КонецФункции

#КонецОбласти

#КонецЕсли
